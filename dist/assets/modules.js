function User(t){return t(USConfig.serverUrl+"/user/:id",{id:"@id"},{update:{method:"PUT"},get:{method:"GET"},remove:{method:"DELETE"},query:{method:"GET",isArray:!0}})}function configAuth(t,e){e.state("us.signin",{url:"/signin",templateUrl:"modules/us-auth/views/signin.html",controller:AuthenticationController}).state("usAdmin.userList",{url:"/user/list",templateUrl:"modules/us-auth/views/user/list.html",controller:UserController}).state("usAdmin.userRegister",{url:"/user/register/:id",templateUrl:"modules/us-auth/views/user/register.html",controller:UserController})}function AuthenticationController(t,e,s,i){this.credentials={},this.signin=function(){i.user=this.credentials,s.go("usAdmin.dashboard")}}function UserController(t,e,s,i,r){this.find=function(){this.users=i.query(),this.currentPage=1,this.entryLimit=8,this.users.$promise.then(function(){this.totalItems=this.users.length,this.noOfPages=Math.ceil(this.totalItems/this.entryLimit)}),this.$watch("search",function(t,e){this.filtered=r(this.users,t),this.totalItems=this.filtered.length,this.noOfPages=Math.ceil(this.totalItems/this.entryLimit),this.currentPage=1},!0)},this.findOne=function(){s.id&&(this.user=i.get({id:s.id}))},this.register=function(t){if(this.alerts=[],t){var r=this.user;s.id?r.$update(function(t){r=t,this.alerts.push({type:"success",msg:"Usuário atualizado com sucesso!"})},function(t){this.alerts.push({type:"danger",msg:t.message})}):(r=new i(r),r.$save(function(t){e.go("us.userRegister",{id:t.id},{reload:!0}),this.alerts.push({type:"success",msg:"Usuário criado com sucesso!"})},function(t){this.alerts.push({type:"danger",msg:t.message})}))}},this.remove=function(t){this.alerts=[],t&&t.$remove(function(){for(var e in this.users)this.users[e]===t&&this.users.splice(e,1);this.alerts.push({type:"success",msg:"Usuário removido com sucesso!"})})}}function configLayout(t,e){t.when("/us-admin","/us-admin/dashboard"),e.state("us",{"abstract":!0,templateUrl:"modules/us-layout/views/layout-site.html"}).state("usAdmin",{"abstract":!0,url:"/us-admin",templateUrl:"modules/us-layout/views/layout-admin.html"}).state("usAdmin.dashboard",{url:"/dashboard",templateUrl:"modules/us-layout/views/dashboard.html"})}function MainController(t,e,s,i){this.loader=!0,this.auth=!1,this.auth?(e.go("usAdmin.dashboard"),this.loader=!1):(e.go("us.signin"),this.loader=!1),console.log("MainController")}function configSite(t,e){e.state("us.home",{url:"/",templateUrl:"modules/us-site/components/home/home.html",controller:HomeController}).state("us.about",{url:"/about",templateUrl:"modules/us-site/components/about/about.html"}).state("us.contact",{url:"/contact",templateUrl:"modules/us-site/components/contact/contact.html",controller:ContactController})}function ContactController(t){console.log("ContactController")}function HomeController(t){console.log("HomeController")}angular.module(USConfig.applicationModuleName).factory("User",User),User.$inject=["$resource"],USConfig.registerModule("usAuth"),USConfig.registerModule("usLayout"),USConfig.registerModule("usUtil"),angular.module("usAuth").config(configAuth),configAuth.$inject=["$urlRouterProvider","$stateProvider"],angular.module("usAuth").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$http","$state","$localStorage"],angular.module("usAuth").controller("UserController",UserController),UserController.$inject=["$scope","$state","$stateParams","User","filterFilter"],angular.module("usLayout").config(configLayout),configLayout.$inject=["$urlRouterProvider","$stateProvider"],angular.module("usLayout").controller("MainController",MainController),MainController.$inject=["$scope","$state","Menu","Widget"],angular.module("usLayout").service("Menu",[function(){this.defaultRoles=["*"],this.menus={};var t=function(t){if(!t)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var e in t.roles)for(var s in this.roles)if(this.roles[s]===t.roles[e])return!0;return!1};this.validateMenuExistance=function(t){if(t&&t.length){if(this.menus[t])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(t){return this.validateMenuExistance(t),this.menus[t]},this.addMenu=function(e,s,i){return this.menus[e]={isPublic:s||!1,roles:i||this.defaultRoles,items:[],shouldRender:t},this.menus[e]},this.removeMenu=function(t){this.validateMenuExistance(t),delete this.menus[t]},this.addMenuItem=function(t,e){return this.validateMenuExistance(t),this.prepareItem(t,e),this.menus[t]},this.addMenuItems=function(t,e){if(this.validateMenuExistance(t),e.length>0)for(var s=0;s<e.length;s++)this.prepareItem(t,e[s]);return this.menus[t]},this.prepareItem=function(t,e){var s=e.itemKey.split("."),i=this.menus[t];if(s.length>0)for(var r=0;r<s.length;r++)if(i.items.length>0)for(var o=0;o<i.items.length;o++)if(i.items[o].id!=s[r]){if(s.length==r+1){e.id=s[r],i.items.push(this.prepareOptions(t,e));break}}else{if(s.length==r+1){console.log("O menu "+s[r+1]+" esta duplicado!");break}i=i.items[o]}else if(s.length===r+1){e.id=s[r],i.items.push(this.prepareOptions(t,e));break}},this.prepareOptions=function(e,s){return{id:s.id,title:s.title,link:s.link,icon:null===s.icon||"undefined"==typeof s.icon?"":s.icon,itemClass:null===s["class"]||"undefined"==typeof s["class"]?"":s["class"],isPublic:null===s.isPublic||"undefined"==typeof s.isPublic?this.menus[e].isPublic:s.isPublic,roles:null===s.roles||"undefined"==typeof s.roles?this.menus[e].roles:s.roles,position:s.position||0,items:[],shouldRender:t}},this.addMenu("topbar"),this.addMenu("navbar")}]),angular.module("usLayout").service("Widget",[function(){this.defaultRoles=["*"],this.dashboards={};var t=function(t){if(!t)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var e in t.roles)for(var s in this.roles)if(this.roles[s]===t.roles[e])return!0;return!1};this.validateDashboardExistance=function(t){if(t&&t.length){if(this.dashboards[t])return!0;throw new Error("Dashboard does not exists")}throw new Error("DashboardId was not provided")},this.getDashboard=function(t){return this.validateDashboardExistance(t),this.dashboards[t]},this.addDashboard=function(e,s,i){return this.dashboards[e]={isPublic:s||!1,roles:i||this.defaultRoles,items:[],shouldRender:t},this.dashboards[e]},this.removeDashboard=function(t){this.validateDashboardExistance(t),delete this.dashboards[t]},this.addDashboardItem=function(t,e){return this.validateDashboardExistance(t),this.prepareItem(t,e),this.dashboards[t]},this.addDashboardItems=function(t,e){if(this.validateDashboardExistance(t),e.length>0)for(var s=0;s<e.length;s++)this.prepareItem(t,e[s]);return this.dashboards[t]},this.prepareItem=function(e,s){var i=this.dashboards[e];i.items.push({template:s.template||null,templateUrl:s.templateUrl||null,itemClass:null===s["class"]||"undefined"==typeof s["class"]?"":s["class"],isPublic:null===s.isPublic||"undefined"==typeof s.isPublic?this.dashboards[e].isPublic:s.isPublic,roles:null===s.roles||"undefined"==typeof s.roles?this.dashboards[e].roles:s.roles,position:s.position||0,shouldRender:t})},this.addDashboard("principal")}]),angular.module("usSite").config(configSite),configSite.$inject=["$urlRouterProvider","$stateProvider"],angular.module("usSite").controller("ContactController",ContactController),ContactController.$inject=["$scope"],angular.module("usSite").controller("HomeController",HomeController),HomeController.$inject=["$scope"];